// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace App.CLI.Tests.Acceptance.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class GetWeatherInformationByCityNameFeature : object, Xunit.IClassFixture<GetWeatherInformationByCityNameFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "GetWeatherInformationByCityName.feature"
#line hidden
        
        public GetWeatherInformationByCityNameFeature(GetWeatherInformationByCityNameFeature.FixtureData fixtureData, App_CLI_Tests_Acceptance_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Get weather information by city name", "As a user\r\nI want to get the weather information for the specified city name", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="User should get the weather information by city name")]
        [Xunit.TraitAttribute("FeatureTitle", "Get weather information by city name")]
        [Xunit.TraitAttribute("Description", "User should get the weather information by city name")]
        public void UserShouldGetTheWeatherInformationByCityName()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User should get the weather information by city name", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 testRunner.Given("the city name Madrid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Title",
                            "LocationType",
                            "WhereOnEarthID"});
                table1.AddRow(new string[] {
                            "Madrid",
                            "City",
                            "766273"});
#line 8
    testRunner.And("the following locations returned by that city", ((string)(null)), table1, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "WeatherStateName",
                            "WindDirection",
                            "Temperature",
                            "AirPressure",
                            "Humidity"});
                table2.AddRow(new string[] {
                            "Light Rain",
                            "ESE",
                            "17.815",
                            "1016",
                            "68"});
                table2.AddRow(new string[] {
                            "Light Rain",
                            "SW",
                            "20.25000",
                            "1015",
                            "63"});
                table2.AddRow(new string[] {
                            "Heavy Cloud",
                            "SSE",
                            "24.13",
                            "1019",
                            "48"});
#line 11
    testRunner.And("the following current weather information for that city", ((string)(null)), table2, "And ");
#line hidden
#line 16
 testRunner.When("a user gets the weather information for that city", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 17
 testRunner.Then("weather information is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="City name is invalid")]
        [Xunit.TraitAttribute("FeatureTitle", "Get weather information by city name")]
        [Xunit.TraitAttribute("Description", "City name is invalid")]
        public void CityNameIsInvalid()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("City name is invalid", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 20
 testRunner.Given("the city name 666", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Title",
                            "LocationType",
                            "WhereOnEarthID"});
                table3.AddRow(new string[] {
                            "Madrid",
                            "City",
                            "766273"});
#line 21
     testRunner.And("the following locations returned by that city", ((string)(null)), table3, "And ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "WeatherStateName",
                            "WindDirection",
                            "Temperature",
                            "AirPressure",
                            "Humidity"});
                table4.AddRow(new string[] {
                            "Light Rain",
                            "ESE",
                            "17.815",
                            "1016",
                            "68"});
                table4.AddRow(new string[] {
                            "Light Rain",
                            "SW",
                            "20.25000",
                            "1015",
                            "63"});
                table4.AddRow(new string[] {
                            "Heavy Cloud",
                            "SSE",
                            "24.13",
                            "1019",
                            "48"});
#line 24
    testRunner.And("the following current weather information for that city", ((string)(null)), table4, "And ");
#line hidden
#line 29
 testRunner.When("a user gets the weather information for that city", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 30
 testRunner.Then("the error Please enter a valid city name is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                GetWeatherInformationByCityNameFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                GetWeatherInformationByCityNameFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
